{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleChange","e","setState","userInput","target","value","handleFormSubmit","preventDefault","console","log","axios","url","type","data","params","api_key","dataType","q","state","lang","then","result","page","searchResult","featuredGifs","className","onSubmit","this","action","htmlFor","onChange","id","placeholder","map","index","images","title","key","src","original","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iVA+FeA,E,YA1Fb,aAAe,IAAD,8BACZ,+CASFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,UAAWF,EAAEG,OAAOC,SAZV,EAgBdC,iBAAmB,SAACL,GAClBA,EAAEM,iBACFC,QAAQC,IAAI,WACZC,IAAM,CACJC,IAAK,sCACLC,KAAM,MACNC,KAAM,OACNC,OAAQ,CACNC,QAAS,mCACTC,SAAU,OACVC,EAAG,EAAKC,MAAMf,UACdgB,KAAM,QAEPC,MAAK,SAACC,GACPb,QAAQC,IAAIY,EAAOR,KAAKA,MACxB,EAAKX,SAAS,CACZoB,KAAM,SACNC,aAAcF,EAAOR,KAAKA,WA/B9B,EAAKK,MAAQ,CACXM,aAAc,GACdrB,UAAW,GACXmB,KAAM,WACNC,aAAc,IANJ,E,iFAsCO,IAAD,OAClBb,IAAM,CACJC,IAAK,wCACLC,KAAM,MACNC,KAAM,OACNC,OAAQ,CACNC,QAAS,mCACTC,SAAU,OACVG,KAAM,QAEPC,MAAK,SAACC,GACP,EAAKnB,SAAS,CACZsB,aAAcH,EAAOR,KAAKA,Y,+BAM9B,OACE,yBAAKY,UAAU,OACb,kEACA,0BAAMC,SAAUC,KAAKrB,iBAAkBsB,OAAO,UAC5C,2BAAOC,QAAQ,aAAf,mCACA,2BAAOC,SAAUH,KAAK3B,aAAc+B,GAAG,YAAYnB,KAAK,OAAOoB,YAAY,uBAC3E,4BAAQpB,KAAK,UAAb,YAEA,wBAAIa,UAAU,gBAEU,aAApBE,KAAKT,MAAMI,KACVK,KAAKT,MAAMM,aAAaS,KAAI,WAAwBC,GAAW,IAAhCH,EAA+B,EAA/BA,GAAII,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,MACxC,OACE,wBAAIC,IAAKN,EAAIN,UAAU,eACrB,yBAAKa,IAAKH,EAAOI,SAAS5B,IAAK6B,IAAKJ,QAM3CT,KAAKT,MAAMK,aAAaU,KAAI,WAAwBC,GAAW,IAAhCH,EAA+B,EAA/BA,GAAII,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,MAC1C,OACE,wBAAIC,IAAKN,EAAIN,UAAU,eACrB,yBAAKa,IAAKH,EAAOI,SAAS5B,IAAK6B,IAAKJ,c,GAhFtCK,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.2a2318a9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      featuredGifs: [],\n      userInput: '',\n      page: 'trending',\n      searchResult: []\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      userInput: e.target.value\n    })\n  }\n\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"clicked\")\n    axios({\n      url: 'http://api.giphy.com/v1/gifs/search',\n      type: 'GET',\n      data: 'json',\n      params: {\n        api_key: 'IcOIA7uzXjoJB4UpdoRW2d6pCcJlgqzW',\n        dataType: 'json',\n        q: this.state.userInput,\n        lang: 'en'\n      }\n    }).then((result) => {\n      console.log(result.data.data)\n      this.setState({\n        page: 'search',\n        searchResult: result.data.data\n      })\n    })\n  }\n\n  componentDidMount() {\n    axios({\n      url: 'http://api.giphy.com/v1/gifs/trending',\n      type: 'GET',\n      data: 'json',\n      params: {\n        api_key: 'IcOIA7uzXjoJB4UpdoRW2d6pCcJlgqzW',\n        dataType: 'json',\n        lang: 'en'\n      }\n    }).then((result) => {\n      this.setState({\n        featuredGifs: result.data.data\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>INSERT CREATIVE GIF SEARCH NAME c:</h1>\n        <form onSubmit={this.handleFormSubmit} action=\"submit\">\n          <label htmlFor=\"gifSearch\">enter a keyword to get started!</label>\n          <input onChange={this.handleChange} id=\"gifSearch\" type=\"text\" placeholder=\"enter keyword here\"/>\n          <button type=\"submit\">Search!</button>\n        </form>\n          <ul className=\"featuredGifs\">\n            {\n              this.state.page === 'trending' ? \n              (this.state.featuredGifs.map(({ id, images, title }, index) => {\n                  return (\n                    <li key={id} className=\"featuredGif\">\n                      <img src={images.original.url} alt={title}/>\n                    </li>\n                  )\n                })\n              ) \n              :\n              (this.state.searchResult.map(({ id, images, title }, index) => {\n                return (\n                  <li key={id} className=\"featuredGif\">\n                    <img src={images.original.url} alt={title}/>\n                  </li>\n                )\n              }))\n            }\n          </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}