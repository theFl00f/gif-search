{"version":3,"sources":["Form.js","FeaturedGifs.js","Footer.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Form","onSubmit","this","props","handleFormSubmit","action","htmlFor","onChange","handleChange","id","type","placeholder","Component","FeaturedGifs","className","page","featuredGifs","map","index","images","title","url","key","href","target","rel","src","original","alt","searchResult","slice","Footer","Header","onClick","restart","App","e","setState","userInput","value","preventDefault","console","log","axios","data","params","api_key","dataType","q","state","lang","then","result","responseType","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c7ec8980.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.handleFormSubmit} action=\"submit\">\r\n                <label htmlFor=\"gifSearch\">enter a keyword to get started!</label>\r\n                <input onChange={this.props.handleChange} id=\"gifSearch\" type=\"text\" placeholder=\"enter keyword here\"/>\r\n                <button type=\"submit\">Search!</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react'\r\n\r\n\r\nclass FeaturedGifs extends Component {\r\n    render() {\r\n        return (\r\n            <ul className=\"featuredGifs\">\r\n                {\r\n                    this.props.page === 'trending' ? \r\n                    (this.props.featuredGifs.map(({ id, images, title, url }, index) => {\r\n                        return (\r\n                        <li key={id} className=\"featuredGif\">\r\n                            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <img src={images.original.url} alt={title}/>\r\n                            </a>\r\n                        </li>\r\n                        )\r\n                    })\r\n                    ) \r\n                    :\r\n                    (\r\n                    this.props.searchResult.slice(0, 6).map(({ id, images, title, url }, index) => {\r\n                    return (\r\n                        <li key={id} className=\"featuredGif\">\r\n                        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <img src={images.original.url} alt={title}/>\r\n                        </a>\r\n                        </li>\r\n                    )\r\n                    }))\r\n                }\r\n            </ul>\r\n        )        \r\n    }\r\n}\r\n\r\nexport default FeaturedGifs;","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <p>Celeste Ellerby 2020, powered by GIPHY</p>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n        <a onClick={ this.props.restart } href=\"#\">\r\n            <h1>Find That GIF!</h1>\r\n        </a>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport './sass/App.scss';\nimport axios from 'axios';\nimport Form from './Form'\nimport FeaturedGifs from './FeaturedGifs';\nimport Footer from './Footer'\nimport Header from './Header'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      featuredGifs: [],\n      userInput: '',\n      page: 'trending',\n      searchResult: []\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      userInput: e.target.value\n    })\n  }\n\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"clicked\")\n    axios({\n      url: 'https://api.giphy.com/v1/gifs/search',\n      type: 'GET',\n      data: 'json',\n      params: {\n        api_key: 'IcOIA7uzXjoJB4UpdoRW2d6pCcJlgqzW',\n        dataType: 'json',\n        q: this.state.userInput,\n        lang: 'en'\n      }\n    }).then((result) => {\n      console.log(result.data.data)\n      this.setState({\n        page: 'search',\n        searchResult: result.data.data\n      })\n    })\n  }\n\n  componentDidMount() {\n    axios({\n      url: 'https://api.giphy.com/v1/gifs/trending',\n      type: 'GET',\n      responseType: 'json',\n      params: {\n        api_key: 'IcOIA7uzXjoJB4UpdoRW2d6pCcJlgqzW',\n        dataType: 'json',\n        lang: 'en'\n      }\n    }).then((result) => {\n      this.setState({\n        featuredGifs: result.data.data\n      })\n    })\n  }\n\n  restart = () => {\n    this.setState ({\n      page: 'trending'\n    })\n  }\n\n  render() {\n    return (\n      <div className={`App ${this.state.page}`}>\n        <div className=\"wrapper\">\n          <Header \n            restart={this.restart}\n          />\n          <Form \n            handleChange={this.handleChange}\n            handleFormSubmit={this.handleFormSubmit}\n          />\n          <FeaturedGifs \n            page={this.state.page} \n            featuredGifs={this.state.featuredGifs} \n            searchResult={this.state.searchResult}\n          />\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}