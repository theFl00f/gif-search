{"version":3,"sources":["Form.js","Modal.js","GifHover.js","FeaturedGif.js","SearchGif.js","FeaturedGifs.js","Footer.js","Header.js","SearchButton.js","App.js","serviceWorker.js","index.js"],"names":["Form","onSubmit","this","props","handleFormSubmit","action","htmlFor","onChange","handleChange","id","type","placeholder","Component","Modal","copyToClipboard","e","textarea","select","document","execCommand","setState","copySuccess","state","show","className","ref","name","cols","rows","value","url","readOnly","onClick","icon","faCopy","GifHover","showModal","onClose","console","log","href","target","rel","faExternalLinkAlt","faTimes","faEllipsisV","FeaturedGif","handleMouseHover","window","matchMedia","matches","isHovering","bind","key","onMouseEnter","onMouseLeave","src","alt","title","SearchGif","FeaturedGifs","page","featuredGifs","map","index","images","original","searchResult","slice","visible","Footer","Header","restart","SearchButton","getMoreGifs","App","prev","userInput","swal","button","loading","error","preventDefault","axios","data","params","api_key","dataType","q","lang","limit","then","result","length","responseType","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8f384737.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.handleFormSubmit} action=\"submit\">\r\n                <label htmlFor=\"gifSearch\">enter a keyword to get started!</label>\r\n                <input onChange={this.props.handleChange} id=\"gifSearch\" type=\"text\" placeholder=\"enter keyword here\"/>\r\n                <button type=\"submit\">Search!</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Modal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            copySuccess: '' \r\n        }\r\n    }\r\n\r\n    copyToClipboard = (e) => {\r\n        this.textarea.select() \r\n        document.execCommand('copy')\r\n        this.setState({\r\n            copySuccess: 'Copied!'\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        if (!this.props.show){\r\n            return null\r\n        }\r\n\r\n\r\n        return(\r\n            \r\n            \r\n            <div className=\"modal\">\r\n                <textarea \r\n                    ref={(textarea) => this.textarea = textarea}\r\n                    name=\"copyField\" \r\n                    id=\"copyField\" \r\n                    cols=\"30\" \r\n                    rows=\"5\"\r\n                    value={this.props.url}\r\n                    readOnly\r\n                >\r\n                </textarea>\r\n                <button\r\n                    onClick={this.copyToClipboard}\r\n                >\r\n                    <FontAwesomeIcon \r\n                        icon={faCopy}\r\n                    />\r\n                    <p>\r\n                        {this.state.copySuccess}\r\n                    </p>\r\n                </button>\r\n                \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, { Component } from 'react';\r\nimport Modal from './Modal';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExternalLinkAlt, faEllipsisV, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass GifHover extends Component {\r\n\r\n    state = {\r\n        show: false\r\n    }\r\n\r\n    showModal = (e) => {\r\n        this.setState({\r\n            show: !this.state.show\r\n        })\r\n    }\r\n\r\n    \r\n    onClose = (e) => {\r\n        console.log(this.props.onClose, this.props.onClose(e))\r\n        this.props.onClose && this.props.onClose(e)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"icons\">\r\n\r\n                <a \r\n                    href={this.props.url}\r\n                    target=\"_blank\" \r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    <FontAwesomeIcon \r\n                        icon={faExternalLinkAlt} \r\n                        className=\"icon\"\r\n                    />\r\n                </a>\r\n                <button\r\n                    onClick={e => {\r\n                        this.showModal()\r\n                    }}\r\n                    >\r\n\r\n                    {!this.state.show ? \r\n                        <FontAwesomeIcon \r\n                            icon={faEllipsisV} \r\n                            className=\"icon\"\r\n                        />\r\n                        :\r\n                        <FontAwesomeIcon\r\n                            icon={faTimes}\r\n                            className=\"icon\"\r\n                        />\r\n                    }\r\n                </button>\r\n                <Modal \r\n                    onClose={this.showModal}\r\n                    show={this.state.show}\r\n                    url={this.props.url}\r\n                >\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GifHover;","import React, { Component } from 'react';\r\nimport GifHover from './GifHover'\r\n\r\nclass FeaturedGif extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleMouseHover = this.handleMouseHover.bind(this)\r\n        window.matchMedia('(max-width: 850px)').matches?\r\n        this.state = {\r\n            isHovering: true\r\n        }\r\n        :\r\n        this.state = {\r\n            isHovering: false\r\n        }\r\n    }\r\n\r\n    handleMouseHover = () => {\r\n        window.matchMedia('(max-width: 850px)').matches?\r\n        this.setState({\r\n            isHovering: true\r\n        })\r\n        :\r\n        this.setState({\r\n            isHovering: !this.state.isHovering\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <li \r\n                key={this.props.id} \r\n                className=\"featuredGif\"\r\n                onMouseEnter={this.handleMouseHover}\r\n                onMouseLeave={this.handleMouseHover}\r\n            >\r\n            <img \r\n                src={this.props.src} \r\n                alt={this.props.title}\r\n            />\r\n            {\r\n                this.state.isHovering &&\r\n                <GifHover \r\n                    url={this.props.url}\r\n                />\r\n            }\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FeaturedGif;\r\n\r\n","import React, { Component } from 'react';\r\nimport GifHover from './GifHover'\r\n\r\nclass SearchGif extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleMouseHover = this.handleMouseHover.bind(this)\r\n        this.state = {\r\n            isHovering: false\r\n        }\r\n    }\r\n\r\n    handleMouseHover = () => {\r\n        this.setState({\r\n            isHovering: !this.state.isHovering\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <li \r\n            key={this.props.id} \r\n            className=\"featuredGif\"\r\n            onMouseEnter={this.handleMouseHover}\r\n            onMouseLeave={this.handleMouseHover}\r\n        >\r\n            <img \r\n                src={this.props.src} \r\n                alt={this.props.alt}\r\n            />\r\n            {\r\n                this.state.isHovering &&\r\n                <GifHover \r\n                    url={this.props.url}\r\n                />\r\n            }\r\n        </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchGif;","import React, { Component } from 'react'\r\nimport FeaturedGif from './FeaturedGif'\r\nimport SearchGif from './SearchGif'\r\n\r\nclass FeaturedGifs extends Component {\r\n\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"featuredGifsContainer\">\r\n                <ul className=\"featuredGifs\">\r\n                    {\r\n                        this.props.page === 'trending' ? \r\n                        ( this.props.featuredGifs.map(({ id, images, title, url }, index) => {\r\n                            return (\r\n                                <FeaturedGif \r\n                                    key={id}\r\n                                    src={images.original.url}\r\n                                    alt={title}\r\n                                    url={url}\r\n                                />\r\n                            )\r\n                        })\r\n                        ) \r\n                        :\r\n                        (\r\n                        this.props.searchResult.slice(0, this.props.visible).map(({ id, images, title, url }, index) => {\r\n                            return (\r\n                                <SearchGif \r\n                                    key={id}\r\n                                    src={images.original.url}\r\n                                    alt={title}\r\n                                    url={url}\r\n                                />\r\n                            )\r\n                        })\r\n                        )\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )        \r\n    }\r\n}\r\n\r\nexport default FeaturedGifs;","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <p>Celeste Ellerby 2020, powered by GIPHY</p>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n        <button \r\n            className=\"header\"\r\n            onClick={this.props.restart}\r\n        >\r\n            <h1>Find That GIF!</h1>\r\n        </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\n\r\nclass SearchButton extends Component {\r\n    render() {\r\n        return(\r\n            this.props.page === 'search' \r\n            &&\r\n            <button \r\n                className=\"load\"\r\n                onClick={this.props.getMoreGifs}\r\n            >\r\n                Load more...\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchButton;","import React, { Component, Fragment } from 'react';\nimport './sass/App.scss';\nimport axios from 'axios';\nimport Form from './Form'\nimport FeaturedGifs from './FeaturedGifs';\nimport Footer from './Footer';\nimport Header from './Header';\nimport SearchButton from './SearchButton';\nimport swal from 'sweetalert';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      featuredGifs: [],\n      userInput: '',\n      page: 'trending',\n      searchResult: [],\n      visible: 6,\n      loading: true,\n      error: false\n    }\n    this.getMoreGifs = this.getMoreGifs.bind(this)\n  }\n\n\n\ngetMoreGifs = () => {\n    this.setState((prev) => {\n        return {visible: prev.visible + 6}\n    }) \n}\n\n  handleChange = (e) => {\n    this.setState({\n      userInput: e.target.value\n    })\n  }\n\n  handleFormSubmit = (e) => {\n    this.state.userInput === ''?\n    swal('please enter something to look for!', {\n      button: 'fine....'\n    })\n    :\n    this.setState({\n      loading: true,\n      error: false\n    })\n    e.preventDefault();\n    axios({\n      url: 'https://api.giphy.com/v1/gifs/search',\n      type: 'GET',\n      data: 'json',\n      params: {\n        api_key: 'IcOIA7uzXjoJB4UpdoRW2d6pCcJlgqzW',\n        dataType: 'json',\n        q: this.state.userInput,\n        lang: 'en',\n        limit: 100\n      }\n    }).then((result) => {\n      console.log(this.state.searchResult.length)\n      this.setState({\n        page: 'search',\n        loading: false,\n        searchResult: result.data.data,\n      }, () => {\n        if (this.state.searchResult.length===0) {\n          this.setState({\n            error: true\n          })\n        }\n      })\n    });\n  };\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    })\n    axios({\n      url: 'https://api.giphy.com/v1/gifs/trending',\n      type: 'GET',\n      responseType: 'json',\n      params: {\n        api_key: 'IcOIA7uzXjoJB4UpdoRW2d6pCcJlgqzW',\n        dataType: 'json',\n        lang: 'en'\n      }\n    }).then((result) => {\n      this.setState({\n        featuredGifs: result.data.data,\n        loading: false\n      })\n    })\n  }\n\n  restart = () => {\n    this.setState ({\n      page: 'trending'\n    })\n  }\n\n  render() {\n    return (\n      <div className={`App ${this.state.page}`}>\n        <div className=\"wrapper\">\n          <Header \n            restart={this.restart}\n          />\n          <Form \n            handleChange={this.handleChange}\n            handleFormSubmit={this.handleFormSubmit}\n          />\n          {\n            this.state.loading? \n            <div className=\"lds-circle\">\n              <div>{/* preloader from loading.io released under CC0 Licence */}</div>\n            </div>\n            :\n            <Fragment>\n              <FeaturedGifs \n                page={this.state.page} \n                featuredGifs={this.state.featuredGifs} \n                searchResult={this.state.searchResult}\n                visible={this.state.visible}\n              />\n              {this.state.error? \n              <p>no results found. :c</p>\n              :\n              <SearchButton \n                page={this.state.page}\n                getMoreGifs={this.getMoreGifs}\n              />}\n            </Fragment>\n          }\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}